package main;

import java.util.Arrays;

public class OfflineExercises {

	// Given a string, return a string where
	// for every char in the original string,
	// there are three chars.

	// multChar("The") → "TTThhheee"
	// multChar("AAbb") → "AAAAAAbbbbbb"
	// multChar("Hi-There") → "HHHiii---TTThhheeerrreee"

	public String multChar(String input) {
		String output = "";
		
		for(int i = 0; i < input.length(); i++) {
			output = output + input.charAt(i) + input.charAt(i) + input.charAt(i);
		}
		return output;
	}
	
	// Return the string (backwards) that is between the first and last appearance
	// of "bert"
	// in the given string, or return the empty string "" if there is not 2
	// occurances of "bert" - Ignore Case

	// getBert("bertclivebert") → "evilc"
	// getBert("xxbertfridgebertyy") → "egdirf"
	// getBert("xxBertfridgebERtyy") → "egdirf"
	// getBert("xxbertyy") → ""
	// getBert("xxbeRTyy") → ""

	public String getBert(String input) {
		int size = input.length();
		String bert = "bert";
		String output = "";
		if (size > 8) {
			for(int i = 0; i < (size - 8); i++) {
				if(input.substring(i, i + 4).equalsIgnoreCase(bert)){
					for(int j = 0; j < (size - 8); j++) {
						if(input.substring(size - 4 - j, size - j).equalsIgnoreCase(bert)) {
							for(int k = 0; k < size - 8; k++) {
								output = output + input.charAt(size - 4 - k);
							}
						}
					}
				}
			}
		}
		return output;
	}

	// Given three ints, a b c, one of them is small, one is medium and one is
	// large. Return true if the three values are evenly spaced, so the
	// difference between small and medium is the same as the difference between
	// medium and large. Do not assume the ints will come to you in a reasonable
	// order.

	// evenlySpaced(2, 4, 6) → true
	// evenlySpaced(4, 6, 2) → true
	// evenlySpaced(4, 6, 3) → false
	// evenlySpaced(4, 60, 9) → false

	public boolean evenlySpaced(int a, int b, int c) {
		double aa = a;
		double bb = b;
		double cc = c;
		if((aa + bb + cc) / 3 == aa || (aa + bb + cc) / 3 == bb || (aa + bb + cc) / 3 == cc) {
			return true;
		}
		return false;
	}

	// Given a string and an int n, return a string that removes n letters from the 'middle' of the string.
	// The string length will be at least n, and be odd when the length of the input is odd.

	// nMid("Hello", 3) → "Ho"
	// nMid("Chocolate", 3) → "Choate"
	// nMid("Chocolate", 1) → "Choclate"

	public String nMid(String input, int a) {
		int pos1 = (input.length() - a) / 2;
		int pos2 = pos1 + (a - 1);
		String output = "";
		for(int i = 0; i < input.length(); i++) {
			if(i < pos1 || i > pos2) {
				output = output + input.charAt(i);
			}
		}
		return output;
	}

	// Given a string, return true if it ends in "dev". Ignore Case

	// endsDev("ihatedev") → true
	// endsDev("wehateDev") → true
	// endsDev("everoyonehatesdevforreal") → false
	// endsDev("devisnotcool") → false

	public boolean endsDev(String input) {
		int size = input.length();
		if (size > 3) {
			int devCheck = size - 3;
			String result = input.substring(devCheck);
			if(result.equalsIgnoreCase("dev")) {
				return true;
			}
		}
		return false;
	}



	// Given a string, return the length of the largest "block" in the string.
	// A block is a run of adjacent chars that are the same.
	//
	// superBlock("hoopplla") → 2
	// superBlock("abbCCCddDDDeeEEE") → 3
	// superBlock("") → 0

	public int superBlock(String input) {
		int size = input.length();
		int max = 1;
		int output = 0;
		if (size > 0) {
			char maxChar = input.charAt(0);
			
			for(int i = 1; i < input.length(); i++) {
				char charNow = input.charAt(i);
				if(charNow == maxChar) {
					
					max++;
					output = max;
				}
				else {
					
					max = 1;
				}
				maxChar = charNow;
			}
		}
		
		return output;

	}
	
	//given a string - return the number of times "am" appears in the String ignoring case -
	// BUT ONLY WHEN the word "am" appears without being followed or proceeded by other letters
	//
	//amISearch("Am I in Amsterdam") → 1
	//amISearch("I am in Amsterdam am I?") → 2
	//amISearch("I have been in Amsterdam") → 0

	public int amISearch(String arg1) {
		int size = arg1.length();
		int output = 0;
		String []ams = arg1.split("am");
		return output;
		
	}
	
	//given a number 
	// if this number is divisible by 3 return "fizz"
	// if this number is divisible by 5 return "buzz"
	// if this number is divisible by both 3  and 5return "fizzbuzz"
	//
	//fizzBuzz(3) → "fizz"
	//fizzBuzz(10) → "buzz"
	//fizzBuzz(15) → "fizzbuzz"
	
	public String fizzBuzz(int arg1) {
		String output = "";
		if(arg1 % 3 == 0) {
			output = output + "fizz";
		}
		if(arg1 % 5 == 0) {
			output = output + "buzz";
		}
		return output;
		
	}
	
	//Given a string split the string into the individual numbers present
	//then add each digit of each number to get a final value for each number
	// String example = "55 72 86"
	//
	// "55" will = the integer 10
	// "72" will = the integer 9
	// "86" will = the integer 14
	//
	// You then need to return the highest vale
	//
	//largest("55 72 86") → 14
	//largest("15 72 80 164") → 11
	//largest("555 72 86 45 10") → 15
	
	public int largest(String arg1) {
		
		String []nums = arg1.split(" ");
		int max = 0;
		int num2 = 0;
		
		for(int i = 0; i < nums.length; i++) {
			int num1 = Integer.parseInt(nums[i]);
			if (num1 < 10) {
				num2 = num1;
			}
			else if(num1 < 100) {
				int num3 = num1 / 10;
				int num4 = num1 % 10;
				num2 = num3 + num4;
			}
			else if(num1 < 1000) {
				int num3 = num1 / 100;
				int ex1 = num1 & 100;
				int num4 = ex1 / 10;
				int num5 = ex1 & 10;
				num2 = num3 + num4 + num5;
			}
			
			max = Math.max(num2, max);
		}	
		System.out.println(max);
		return max;
	}
	
	
}
